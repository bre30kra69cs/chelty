/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v3/ping': {
    /**
     * Test connectivity to the Rest API.
     *
     * Weight: 1
     */
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
      };
    };
  };
  '/api/v3/time': {
    /**
     * Test connectivity to the Rest API and get the current server time.
     *
     * Weight: 1
     */
    get: {
      responses: {
        /** Binance server UTC timestamp */
        200: {
          content: {
            'application/json': {
              serverTime?: number;
            };
          };
        };
      };
    };
  };
  '/api/v3/exchangeInfo': {
    /**
     * Current exchange trading rules and symbol information
     *
     * - If any symbol provided in either symbol or symbols do not exist, the endpoint will throw an error.
     *
     * Weight: 10
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
          arraySymbols?: components['parameters']['arraySymbols'];
        };
      };
      responses: {
        /** Current exchange trading rules and symbol information */
        200: {
          content: {
            'application/json': {
              timezone?: string;
              serverTime?: number;
              rateLimits?: {
                rateLimitType?: string;
                interval?: string;
                intervalNum?: number;
                limit?: number;
              }[];
              exchangeFilters?: {[key: string]: unknown}[];
              symbols?: {
                symbol?: string;
                status?: string;
                baseAsset?: string;
                baseAssetPrecision?: number;
                quoteAsset?: string;
                quoteAssetPrecision?: number;
                baseCommissionPrecision?: number;
                quoteCommissionPrecision?: number;
                orderTypes?: string[];
                icebergAllowed?: boolean;
                ocoAllowed?: boolean;
                quoteOrderQtyMarketAllowed?: boolean;
                isSpotTradingAllowed?: boolean;
                isMarginTradingAllowed?: boolean;
                filters?: {
                  filterType?: string;
                  minPrice?: string;
                  maxPrice?: string;
                  tickSize?: string;
                }[];
                permissions?: string[];
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/depth': {
    /**
     * | Limit               | Weight  |
     * | -------------       |---------|
     * | 5, 10, 20, 50, 100  | 1       |
     * | 500                 | 5       |
     * | 1000                | 10      |
     * | 5000                | 50      |
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          limit?: 5 | 10 | 20 | 50 | 100 | 500 | 1000 | 5000;
        };
      };
      responses: {
        /** Order book */
        200: {
          content: {
            'application/json': {
              lastUpdateId?: number;
              bids?: string[][][];
              asks?: string[][][];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/trades': {
    /**
     * Get recent trades.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
        };
      };
      responses: {
        /** Trade list */
        200: {
          content: {
            'application/json': components['schemas']['trade'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/historicalTrades': {
    /**
     * Get older market trades.
     *
     * Weight: 5
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** Trade id to fetch from. Default gets most recent trades. */
          fromId?: components['parameters']['fromId'];
        };
      };
      responses: {
        /** Trade list */
        200: {
          content: {
            'application/json': components['schemas']['trade'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/aggTrades': {
    /**
     * Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
     * - If `startTime` and `endTime` are sent, time between startTime and endTime must be less than 1 hour.
     * - If `fromId`, `startTime`, and `endTime` are not sent, the most recent aggregate trades will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Trade id to fetch from. Default gets most recent trades. */
          fromId?: components['parameters']['fromId'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
        };
      };
      responses: {
        /** Trade list */
        200: {
          content: {
            'application/json': components['schemas']['aggTrade'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/klines': {
    /**
     * Kline/candlestick bars for a symbol.\
     * Klines are uniquely identified by their open time.
     *
     * - If `startTime` and `endTime` are not sent, the most recent klines are returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** kline intervals */
          interval:
            | '1m'
            | '3m'
            | '5m'
            | '15m'
            | '30m'
            | '1h'
            | '2h'
            | '4h'
            | '6h'
            | '8h'
            | '12h'
            | '1d'
            | '3d'
            | '1w'
            | '1M';
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
        };
      };
      responses: {
        /** Kline data */
        200: {
          content: {
            'application/json': unknown[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/avgPrice': {
    /**
     * Current average price for a symbol.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
        };
      };
      responses: {
        /** Average price */
        200: {
          content: {
            'application/json': {
              mins?: number;
              price?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/ticker/24hr': {
    /**
     * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
     *
     * - If the symbol is not sent, tickers for all symbols will be returned in an array.
     *
     * Weight:\
     * `1` for a single symbol;\
     * `40` when the symbol parameter is omitted
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
        };
      };
      responses: {
        /** 24hr ticker */
        200: {
          content: {
            'application/json':
              | components['schemas']['ticker']
              | components['schemas']['tickerList'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/ticker/price': {
    /**
     * Latest price for a symbol or symbols.
     *
     * - If the symbol is not sent, prices for all symbols will be returned in an array.
     *
     * Weight:\
     * `1` for a single symbol;\
     * `2` when the symbol parameter is omitted
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
        };
      };
      responses: {
        /** Price ticker */
        200: {
          content: {
            'application/json':
              | components['schemas']['priceTicker']
              | components['schemas']['priceTickerList'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/ticker/bookTicker': {
    /**
     * Best price/qty on the order book for a symbol or symbols.
     *
     * - If the symbol is not sent, bookTickers for all symbols will be returned in an array.
     *
     * Weight:\
     * 1 for a single symbol;\
     * 2 when the symbol parameter is omitted
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
        };
      };
      responses: {
        /** Order book ticker */
        200: {
          content: {
            'application/json':
              | components['schemas']['bookTicker']
              | components['schemas']['bookTickerList'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/order/test': {
    /**
     * Test new order creation and signature/recvWindow long.
     * Creates and validates a new order but does not send it into the matching engine.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** SELL or BUY */
          side: components['parameters']['side'];
          /** Order type */
          type: components['parameters']['orderType'];
          /** Order time in force */
          timeInForce?: components['parameters']['timeInForce'];
          /** Order quantity */
          quantity?: components['parameters']['optionalQuantity'];
          /** Quote quantity */
          quoteOrderQty?: components['parameters']['quoteOrderQty'];
          /** Order price */
          price?: components['parameters']['optionalPrice'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
          stopPrice?: components['parameters']['stopPrice'];
          /** Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
          icebergQty?: components['parameters']['icebergQty'];
          /** Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
          newOrderRespType?: components['parameters']['newOrderRespType'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/order': {
    /**
     * Check an order's status.
     *
     * - Either `orderId` or `origClientOrderId` must be sent.
     * - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
     *
     * Weight: 2
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Order id */
          orderId?: components['parameters']['orderId'];
          /** Order id from client */
          origClientOrderId?: components['parameters']['origClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Order details */
        200: {
          content: {
            'application/json': components['schemas']['orderDetails'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Send in a new order.
     *
     * - `LIMIT_MAKER` are `LIMIT` orders that will be rejected if they would immediately match and trade as a taker.
     * - `STOP_LOSS` and `TAKE_PROFIT` will execute a `MARKET` order when the `stopPrice` is reached.
     * - Any `LIMIT` or `LIMIT_MAKER` type order can be made an iceberg order by sending an `icebergQty`.
     * - Any order with an `icebergQty` MUST have `timeInForce` set to `GTC`.
     * - `MARKET` orders using `quantity` specifies how much a user wants to buy or sell based on the market price.
     * - `MARKET` orders using `quoteOrderQty` specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and `quoteOrderQty`.
     * - `MARKET` orders using `quoteOrderQty` will not break `LOT_SIZE` filter rules; the order will execute a quantity that will have the notional value as close as possible to `quoteOrderQty`.
     * - same `newClientOrderId` can be accepted only when the previous one is filled, otherwise the order will be rejected.
     *
     * Trigger order price rules against market price for both `MARKET` and `LIMIT` versions:
     *
     * - Price above market price: `STOP_LOSS` `BUY`, `TAKE_PROFIT` `SELL`
     * - Price below market price: `STOP_LOSS` `SELL`, `TAKE_PROFIT` `BUY`
     *
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** SELL or BUY */
          side: components['parameters']['side'];
          /** Order type */
          type: components['parameters']['orderType'];
          /** Order time in force */
          timeInForce?: components['parameters']['timeInForce'];
          /** Order quantity */
          quantity?: components['parameters']['optionalQuantity'];
          /** Quote quantity */
          quoteOrderQty?: components['parameters']['quoteOrderQty'];
          /** Order price */
          price?: components['parameters']['optionalPrice'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
          stopPrice?: components['parameters']['stopPrice'];
          /** Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
          icebergQty?: components['parameters']['icebergQty'];
          /** Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
          newOrderRespType?: components['parameters']['newOrderRespType'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Order result */
        200: {
          content: {
            'application/json':
              | components['schemas']['orderResponseAck']
              | components['schemas']['orderResponseResult']
              | components['schemas']['orderResponseFull'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Cancel an active order.
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Order id */
          orderId?: components['parameters']['orderId'];
          /** Order id from client */
          origClientOrderId?: components['parameters']['origClientOrderId'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Cancelled order */
        200: {
          content: {
            'application/json': components['schemas']['order'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/openOrders': {
    /**
     * Get all open orders on a symbol. Careful when accessing this with no symbol.
     *
     * Weight:\
     * `3` for a single symbol;\
     * `40` when the symbol parameter is omitted
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Current open orders */
        200: {
          content: {
            'application/json': components['schemas']['orderDetails'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Cancels all active orders on a symbol.\
     * This includes OCO orders.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Cancelled orders */
        200: {
          content: {
            'application/json': components['schemas']['order'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/allOrders': {
    /**
     * Get all account orders; active, canceled, or filled..
     *
     * - If `orderId` is set, it will get orders >= that `orderId`. Otherwise most recent orders are returned.
     * - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
     * - If `startTime` and/or `endTime` provided, `orderId` is not required
     *
     * Weight: 10
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Order id */
          orderId?: components['parameters']['orderId'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Current open orders */
        200: {
          content: {
            'application/json': components['schemas']['orderDetails'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/order/oco': {
    /**
     * Send in a new OCO
     *
     * - Price Restrictions:
     *   - `SELL`: Limit Price > Last Price > Stop Price
     *   - `BUY`: Limit Price < Last Price < Stop Price
     * - Quantity Restrictions:
     *     - Both legs must have the same quantity
     *     - `ICEBERG` quantities however do not have to be the same
     * - Order Rate Limit
     *     - `OCO` counts as 2 orders against the order rate limit.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** A unique Id for the entire orderList */
          listClientOrderId?: components['parameters']['listClientOrderId'];
          /** SELL or BUY */
          side: components['parameters']['side'];
          quantity: components['parameters']['quantity'];
          /** A unique Id for the limit order */
          limitClientOrderId?: components['parameters']['limitClientOrderId'];
          /** Order price */
          price: components['parameters']['price'];
          limitIcebergQty?: components['parameters']['limitIcebergQty'];
          /** A unique Id for the stop loss/stop loss limit leg */
          stopClientOrderId?: components['parameters']['stopClientOrderId'];
          stopPrice: components['parameters']['ocoStopPrice'];
          /** If provided, stopLimitTimeInForce is required. */
          stopLimitPrice?: components['parameters']['stopLimitPrice'];
          stopIcebergQty?: components['parameters']['stopIcebergQty'];
          stopLimitTimeInForce?: components['parameters']['stopLimitTimeInForce'];
          /** Set the response JSON. */
          newOrderRespType?: components['parameters']['ocoNewOrderRespType'];
          /** Default NO_SIDE_EFFECT */
          sideEffectType?: components['parameters']['sideEffectType'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** New OCO details */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
              orderReports?: {
                symbol?: string;
                orderId?: number;
                orderListId?: number;
                clientOrderId?: string;
                transactTime?: number;
                price?: string;
                origQty?: string;
                executedQty?: string;
                cummulativeQuoteQty?: string;
                status?: string;
                timeInForce?: string;
                type?: string;
                side?: string;
                stopPrice?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/orderList': {
    /**
     * Retrieves a specific OCO based on provided optional parameters
     *
     * Weight: 2
     */
    get: {
      parameters: {
        query: {
          /** Order list id */
          orderListId?: components['parameters']['orderListId'];
          /** Order id from client */
          origClientOrderId?: components['parameters']['origClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** OCO details */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Cancel an entire Order List
     *
     * Canceling an individual leg will cancel the entire OCO
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** Order list id */
          orderListId?: components['parameters']['orderListId'];
          /** A unique Id for the entire orderList */
          listClientOrderId?: components['parameters']['listClientOrderId'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Report on deleted OCO */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
              orderReports?: {
                symbol?: string;
                origClientOrderId?: string;
                orderId?: number;
                orderListId?: number;
                clientOrderId?: string;
                price?: string;
                origQty?: string;
                executedQty?: string;
                cummulativeQuoteQty?: string;
                status?: string;
                timeInForce?: string;
                type?: string;
                side?: string;
                stopPrice?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/allOrderList': {
    /**
     * Retrieves all OCO based on provided optional parameters
     *
     * Weight: 10
     */
    get: {
      parameters: {
        query: {
          /** Trade id to fetch from. Default gets most recent trades. */
          fromId?: components['parameters']['fromId'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of OCO orders */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              isIsolated?: boolean;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/openOrderList': {
    /** Weight: 3 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of OCO orders */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/account': {
    /**
     * Get current account information.
     *
     * Weight: 10
     */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Account details */
        200: {
          content: {
            'application/json': components['schemas']['account'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/myTrades': {
    /**
     * Get trades for a specific account and symbol.
     *
     * If `fromId` is set, it will get id >= that `fromId`. Otherwise most recent orders are returned.
     *
     * Weight: 10
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** This can only be used in combination with symbol. */
          orderId?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Trade id to fetch from. Default gets most recent trades. */
          fromId?: components['parameters']['fromId'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of trades */
        200: {
          content: {
            'application/json': components['schemas']['myTrade'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/transfer': {
    /**
     * - Response in descending order
     * - Returns data for last 7 days by default
     * - Set `archived` to `true` to query data from 6 months ago
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /** Tranfer Type */
          type?: 'ROLL_IN' | 'ROLL_OUT';
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** Default: false. Set to true for archived data from 6 months ago */
          archived?: components['parameters']['archived'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin account transfer history, response in descending order */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Execute transfer between spot account and cross margin account.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /**
           * 1 -> transfer from main account to margin account \
           * 2 -> transfer from margin account to main account
           */
          type?: 1 | 2;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer Id */
        200: {
          content: {
            'application/json': components['schemas']['transaction'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/loan': {
    /**
     * - `txId` or `startTime` must be sent. `txId` takes precedence.
     * - Response in descending order
     * - If `isolatedSymbol` is not sent, crossed margin data will be returned
     * - Set `archived` to `true` to query data from 6 months ago
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** Isolated symbol */
          isolatedSymbol?: components['parameters']['isolatedSymbol'];
          /** the tranId in  `POST /sapi/v1/margin/loan` */
          txId?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** Default: false. Set to true for archived data from 6 months ago */
          archived?: components['parameters']['archived'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Load records */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Apply for a loan.
     *
     * - If "isIsolated" = "TRUE", "symbol" must be sent
     * - "isIsolated" = "FALSE" for crossed margin loan
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transaction id */
        200: {
          content: {
            'application/json': components['schemas']['transaction'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/repay': {
    /**
     * - `txId` or `startTime` must be sent. `txId` takes precedence.
     * - Response in descending order
     * - If `isolatedSymbol` is not sent, crossed margin data will be returned
     * - Set `archived` to `true` to query data from 6 months ago
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** Isolated symbol */
          isolatedSymbol?: components['parameters']['isolatedSymbol'];
          /** the tranId in  `POST /sapi/v1/margin/repay` */
          txId?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** Default: false. Set to true for archived data from 6 months ago */
          archived?: components['parameters']['archived'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Load records */
        200: {
          content: {
            'application/json': {
              rows?: {
                /** Isolated symbol, will not be returned for crossed margin */
                isolatedSymbol?: string;
                /** Total amount repaid */
                amount?: string;
                asset?: string;
                /** Interest repaid */
                interest?: string;
                /** Principal repaid */
                principal?: string;
                /** One of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account) */
                status?: string;
                timestamp?: number;
                txId?: number;
              }[];
              total?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Repay loan for margin account.
     *
     * - If "isIsolated" = "TRUE", "symbol" must be sent
     * - "isIsolated" = "FALSE" for crossed margin repay
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transaction id */
        200: {
          content: {
            'application/json': components['schemas']['transaction'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/asset': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
        };
      };
      responses: {
        /** Asset details */
        200: {
          content: {
            'application/json': {
              assetFullName?: string;
              assetName?: string;
              isBorrowable?: boolean;
              isMortgageable?: boolean;
              userMinBorrow?: string;
              userMinRepay?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/pair': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
        };
      };
      responses: {
        /** Margin pair details */
        200: {
          content: {
            'application/json': {
              id?: number;
              symbol?: string;
              base?: string;
              quote?: string;
              isMarginTrade?: boolean;
              isBuyAllowed?: boolean;
              isSellAllowed?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/allAssets': {
    /** Weight: 1 */
    get: {
      responses: {
        /** Assets details */
        200: {
          content: {
            'application/json': {
              assetFullName?: string;
              assetName?: string;
              isBorrowable?: boolean;
              isMortgageable?: boolean;
              userMinBorrow?: string;
              userMinRepay?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/allPairs': {
    /** Weight: 1 */
    get: {
      responses: {
        /** Margin pairs */
        200: {
          content: {
            'application/json': {
              base?: string;
              id?: number;
              isBuyAllowed?: boolean;
              isMarginTrade?: boolean;
              isSellAllowed?: boolean;
              quote?: string;
              symbol?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/priceIndex': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
        };
      };
      responses: {
        /** Price index */
        200: {
          content: {
            'application/json': {
              calcTime?: number;
              price?: string;
              symbol?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/order': {
    /**
     * - Either `orderId` or `origClientOrderId` must be sent.
     * - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Order id */
          orderId?: components['parameters']['orderId'];
          /** Order id from client */
          origClientOrderId?: components['parameters']['origClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Interest History, response in descending order */
        200: {
          content: {
            'application/json': components['schemas']['marginOrderDetail'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Post a new order for margin account.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** SELL or BUY */
          side: components['parameters']['side'];
          /** Order type */
          type: components['parameters']['orderType'];
          quantity: components['parameters']['quantity'];
          /** Quote quantity */
          quoteOrderQty?: components['parameters']['quoteOrderQty'];
          /** Order price */
          price?: components['parameters']['optionalPrice'];
          /** Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
          stopPrice?: components['parameters']['stopPrice'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
          icebergQty?: components['parameters']['icebergQty'];
          /** Set the response JSON. */
          newOrderRespType?: components['parameters']['ocoNewOrderRespType'];
          /** Default NO_SIDE_EFFECT */
          sideEffectType?: components['parameters']['sideEffectType'];
          /** Order time in force */
          timeInForce?: components['parameters']['timeInForce'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin order info */
        200: {
          content: {
            'application/json':
              | components['schemas']['marginOrderResponseAck']
              | components['schemas']['marginOrderResponseResult']
              | components['schemas']['marginOrderResponseFull'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Cancel an active order for margin account.
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Order id */
          orderId?: components['parameters']['orderId'];
          /** Order id from client */
          origClientOrderId?: components['parameters']['origClientOrderId'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Cancelled margin order details */
        200: {
          content: {
            'application/json': components['schemas']['marginOrder'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/interestHistory': {
    /**
     * - Response in descending order
     * - If `isolatedSymbol` is not sent, crossed margin data will be returned
     * - Set `archived` to `true` to query data from 6 months ago
     * - `type` in response has 4 enums:
     *   - `PERIODIC` interest charged per hour
     *   - `ON_BORROW` first interest charged on borrow
     *   - `PERIODIC_CONVERTED` interest charged per hour converted into BNB
     *   - `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /** Isolated symbol */
          isolatedSymbol?: components['parameters']['isolatedSymbol'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** Default: false. Set to true for archived data from 6 months ago */
          archived?: components['parameters']['archived'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Interest History, response in descending order */
        200: {
          content: {
            'application/json': {
              rows?: {
                isolatedSymbol?: string;
                asset?: string;
                interest?: string;
                interestAccuredTime?: number;
                interestRate?: string;
                principal?: string;
                type?: string;
              }[];
              total?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/forceLiquidationRec': {
    /**
     * - Response in descending order
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Isolated symbol */
          isolatedSymbol?: components['parameters']['isolatedSymbol'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Force Liquidation History, response in descending order */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/account': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin account details */
        200: {
          content: {
            'application/json': {
              borrowEnabled?: boolean;
              marginLevel?: string;
              totalAssetOfBtc?: string;
              totalLiabilityOfBtc?: string;
              totalNetAssetOfBtc?: string;
              tradeEnabled?: boolean;
              transferEnabled?: boolean;
              userAssets?: {
                asset?: string;
                borrowed?: string;
                free?: string;
                interest?: string;
                locked?: string;
                netAsset?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/openOrders': {
    /**
     * - If the `symbol` is not sent, orders for all symbols will be returned in an array.
     * - When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange
     * - If isIsolated ="TRUE", symbol must be sent.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin open orders list */
        200: {
          content: {
            'application/json': components['schemas']['marginOrderDetail'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * - Cancels all active orders on a symbol for margin account.
     * - This includes OCO orders.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Cancelled margin orders */
        200: {
          content: {
            'application/json': components['schemas']['canceledMarginOrderDetail'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/allOrders': {
    /**
     * - If `orderId` is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
     * - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
     *
     * Weight: 1
     *
     * Request Limit: 60 times/min per IP
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Order id */
          orderId?: components['parameters']['orderId'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin order list */
        200: {
          content: {
            'application/json': components['schemas']['marginOrderDetail'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/order/oco': {
    /**
     * Send in a new OCO for a margin account
     *
     * - Price Restrictions:
     *   - SELL: Limit Price > Last Price > Stop Price
     *   - BUY: Limit Price < Last Price < Stop Price
     * - Quantity Restrictions:
     *   - Both legs must have the same quantity
     *   - ICEBERG quantities however do not have to be the same.
     * - Order Rate Limit
     *   - OCO counts as 2 orders against the order rate limit.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** A unique Id for the entire orderList */
          listClientOrderId?: components['parameters']['listClientOrderId'];
          /** SELL or BUY */
          side: components['parameters']['side'];
          quantity: components['parameters']['quantity'];
          /** A unique Id for the limit order */
          limitClientOrderId?: components['parameters']['limitClientOrderId'];
          /** Order price */
          price: components['parameters']['price'];
          limitIcebergQty?: components['parameters']['limitIcebergQty'];
          /** A unique Id for the stop loss/stop loss limit leg */
          stopClientOrderId?: components['parameters']['stopClientOrderId'];
          stopPrice: components['parameters']['ocoStopPrice'];
          /** If provided, stopLimitTimeInForce is required. */
          stopLimitPrice?: components['parameters']['stopLimitPrice'];
          stopIcebergQty?: components['parameters']['stopIcebergQty'];
          stopLimitTimeInForce?: components['parameters']['stopLimitTimeInForce'];
          /** Set the response JSON. */
          newOrderRespType?: components['parameters']['ocoNewOrderRespType'];
          /** Default NO_SIDE_EFFECT */
          sideEffectType?: components['parameters']['sideEffectType'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** New Margin OCO details */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              /** will not return if no margin trade happens */
              marginBuyBorrowAmount?: string;
              /** will not return if no margin trade happens */
              marginBuyBorrowAsset?: string;
              isIsolated?: boolean;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
              orderReports?: {
                symbol?: string;
                orderId?: number;
                orderListId?: number;
                clientOrderId?: string;
                transactTime?: number;
                price?: string;
                origQty?: string;
                executedQty?: string;
                cummulativeQuoteQty?: string;
                status?: string;
                timeInForce?: string;
                type?: string;
                side?: string;
                stopPrice?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/orderList': {
    /**
     * Retrieves a specific OCO based on provided optional parameters
     *
     * - Either `orderListId` or `origClientOrderId` must be provided
     *
     * Weight: 2
     */
    get: {
      parameters: {
        query: {
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Mandatory for isolated margin, not supported for cross margin */
          symbol?: string;
          /** Order list id */
          orderListId?: components['parameters']['orderListId'];
          /** Order id from client */
          origClientOrderId?: components['parameters']['origClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin OCO details */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              isIsolated?: boolean;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Cancel an entire Order List for a margin account
     *
     * - Canceling an individual leg will cancel the entire OCO
     * - Either `orderListId` or `listClientOrderId` must be provided
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Order list id */
          orderListId?: components['parameters']['orderListId'];
          /** A unique Id for the entire orderList */
          listClientOrderId?: components['parameters']['listClientOrderId'];
          /** Used to uniquely identify this cancel. Automatically generated by default */
          newClientOrderId?: components['parameters']['newClientOrderId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin OCO details */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              isIsolated?: boolean;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
              orderReports?: {
                symbol?: string;
                origClientOrderId?: string;
                orderId?: number;
                orderListId?: number;
                clientOrderId?: string;
                price?: string;
                origQty?: string;
                executedQty?: string;
                cummulativeQuoteQty?: string;
                status?: string;
                timeInForce?: string;
                type?: string;
                side?: string;
                stopPrice?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/allOrderList': {
    /**
     * Retrieves all OCO for a specific margin account based on provided optional parameters
     *
     * Weight: 10
     */
    get: {
      parameters: {
        query: {
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Mandatory for isolated margin, not supported for cross margin */
          symbol?: string;
          /** If supplied, neither `startTime` or `endTime` can be provided */
          fromId?: string;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default Value: 500; Max Value: 1000 */
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of Margin OCO orders */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              isIsolated?: boolean;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/openOrderList': {
    /** Weight: 3 */
    get: {
      parameters: {
        query: {
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** Mandatory for isolated margin, not supported for cross margin */
          symbol?: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of Open Margin OCO orders */
        200: {
          content: {
            'application/json': {
              orderListId?: number;
              contingencyType?: string;
              listStatusType?: string;
              listOrderStatus?: string;
              listClientOrderId?: string;
              transactionTime?: number;
              symbol?: string;
              isIsolated?: boolean;
              orders?: {
                symbol?: string;
                orderId?: number;
                clientOrderId?: string;
              }[];
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/myTrades': {
    /**
     * - If `fromId` is set, it will get orders >= that `fromId`. Otherwise most recent trades are returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
          isIsolated?: components['parameters']['isIsolatedMargin'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Trade id to fetch from. Default gets most recent trades. */
          fromId?: components['parameters']['fromId'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of margin trades */
        200: {
          content: {
            'application/json': components['schemas']['marginTrade'][];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/maxBorrowable': {
    /**
     * - If `isolatedSymbol` is not sent, crossed margin data will be sent.
     * - `borrowLimit` is also available from https://www.binance.com/en/margin-fee
     *
     * Weight: 5
     */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** Isolated symbol */
          isolatedSymbol?: components['parameters']['isolatedSymbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Details on max borrow amount */
        200: {
          content: {
            'application/json': {
              /** account's currently max borrowable amount with sufficient system availability */
              amount?: string;
              /** max borrowable amount limited by the account level */
              borrowLimit?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/maxTransferable': {
    /**
     * - If `isolatedSymbol` is not sent, crossed margin data will be sent.
     *
     * Weight: 5
     */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** Isolated symbol */
          isolatedSymbol?: components['parameters']['isolatedSymbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Details on max transferable amount */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/isolated/transfer': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          transFrom?: components['parameters']['transFrom'];
          transTo?: components['parameters']['transTo'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Isolated Margin Transfer History */
        200: {
          content: {
            'application/json': components['schemas']['marginTransferDetails'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          transFrom?: components['parameters']['transFrom'];
          transTo?: components['parameters']['transTo'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transaction Id */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/isolated/account': {
    /**
     * - If "symbols" is not sent, all isolated assets will be returned.
     * - If "symbols" is sent, only the isolated assets of the sent symbols will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Max 5 symbols can be sent; separated by ',' */
          symbols?: components['parameters']['symbols'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Isolated Margin Account Info when "symbols" is not sent */
        200: {
          content: {
            'application/json': components['schemas']['isolatedMarginAccountInfo'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Enable isolated margin account for a specific symbol.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Isolated Margin Account status */
        200: {
          content: {
            'application/json': {
              success?: boolean;
              symbol?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours .
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Isolated Margin Account status */
        200: {
          content: {
            'application/json': {
              success?: boolean;
              symbol?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/isolated/accountLimit': {
    /**
     * Query enabled isolated margin account limit.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Number of enabled Isolated Margin Account and its limit */
        200: {
          content: {
            'application/json': {
              enabledAccount?: number;
              maxAccount?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/isolated/pair': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol: components['parameters']['symbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Isolated Margin Symbol */
        200: {
          content: {
            'application/json': {
              symbol?: string;
              base?: string;
              quote?: string;
              isMarginTrade?: boolean;
              isBuyAllowed?: boolean;
              isSellAllowed?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/isolated/allPairs': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** All Isolated Margin Symbols */
        200: {
          content: {
            'application/json': {
              symbol?: string;
              base?: string;
              quote?: string;
              isMarginTrade?: boolean;
              isBuyAllowed?: boolean;
              isSellAllowed?: boolean;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bnbBurn': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Status on BNB to pay for trading fees */
        200: {
          content: {
            'application/json': components['schemas']['bnbBurnStatus'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * - "spotBNBBurn" and "interestBNBBurn" should be sent at least one.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Determines whether to use BNB to pay for trading fees on SPOT */
          spotBNBBurn?: 'true' | 'false';
          /** Determines whether to use BNB to pay for margin loan's interest */
          interestBNBBurn?: 'true' | 'false';
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Status on BNB to pay for trading fees */
        200: {
          content: {
            'application/json': components['schemas']['bnbBurnStatus'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/margin/interestRateHistory': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** Defaults to user's vip level */
          vipLevel?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin Interest Rate History */
        200: {
          content: {
            'application/json': {
              asset?: string;
              dailyInterestRate?: string;
              timestamp?: number;
              vipLevel?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/system/status': {
    /**
     * Fetch system status.
     *
     * Weight: 1
     */
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              /** 0: normal, 1：system maintenance */
              status?: number;
              /** normal|system maintenance */
              msg?: string;
            };
          };
        };
      };
    };
  };
  '/sapi/v1/capital/config/getall': {
    /**
     * Get information of coins (available for deposit and withdraw) for user.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** All coins details information */
        200: {
          content: {
            'application/json': {
              coin?: string;
              depositAllEnable?: boolean;
              free?: string;
              freeze?: string;
              ipoable?: string;
              ipoing?: string;
              isLegalMoney?: boolean;
              locked?: string;
              name?: string;
              networkList?: {
                addressRegex?: string;
                coin?: string;
                /** shown only when "depositEnable" is false. */
                depositDesc?: string;
                depositEnable?: boolean;
                isDefault?: boolean;
                memoRegex?: string;
                /** min number for balance confirmation. */
                minConfirm?: number;
                name?: string;
                resetAddressStatus?: boolean;
                specialTips?: string;
                /** confirmation number for balance unlock. */
                unLockConfirm?: number;
                /** shown only when "withdrawEnable" is false */
                withdrawDesc?: string;
                withdrawEnable?: boolean;
                withdrawFee?: string;
                withdrawIntegerMultiple?: string;
                withdrawMax?: string;
                withdrawMin?: string;
                sameAddress?: boolean;
              }[];
              storage?: string;
              trading?: boolean;
              withdrawAllEnable?: boolean;
              withdrawing?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/accountSnapshot': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          type: 'SPOT' | 'MARGIN' | 'FUTURES';
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Account Snapshot */
        200: {
          content: {
            'application/json':
              | components['schemas']['snapshotSpot']
              | components['schemas']['snapshotMargin']
              | components['schemas']['snapshotFutures'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/account/disableFastWithdrawSwitch': {
    /**
     * - This request will disable fastwithdraw switch under your account.
     * - You need to enable "trade" option for the api key which requests this endpoint.
     */
    post: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/account/enableFastWithdrawSwitch': {
    /**
     * - This request will enable fastwithdraw switch under your account. You need to enable "trade" option for the api key which requests this endpoint.
     * - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.
     */
    post: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/capital/withdraw/apply': {
    /**
     * Submit a withdraw request.
     *
     * - If `network` not send, return with default network of the coin.
     * - You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Coin name */
          coin: components['parameters']['coin'];
          /** Client id for withdraw */
          withdrawOrderId?: string;
          /** Get the value from `GET /sapi/v1/capital/config/getall` */
          network?: string;
          address: string;
          /** Secondary address identifier for coins like XRP,XMR etc. */
          addressTag?: string;
          amount: components['parameters']['amount'];
          /**
           * When making internal transfer
           * - `true` ->  returning the fee to the destination account;
           * - `false` -> returning the fee back to the departure account.
           */
          transactionFeeFlag?: boolean;
          name?: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transafer Id */
        200: {
          content: {
            'application/json': {
              id?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/capital/deposit/hisrec': {
    /**
     * Fetch deposit history.
     *
     * - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Coin name */
          coin: components['parameters']['coin'];
          /**
           * 0 -> pending\
           * 6 -> credited but cannot withdraw\
           * 1 -> success
           */
          status?: 0 | 6 | 1;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          offset?: components['parameters']['offset'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of deposits */
        200: {
          content: {
            'application/json': {
              amount?: string;
              coin?: string;
              network?: string;
              status?: number;
              address?: string;
              addressTag?: string;
              txId?: string;
              insertTime?: number;
              transferType?: number;
              /** confirm times for unlocking */
              unlockConfirm?: string;
              confirmTimes?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/capital/withdraw/history': {
    /**
     * Fetch withdraw history.
     *
     * - `network` may not be in the response for old withdraw.
     * - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Coin name */
          coin: components['parameters']['coin'];
          withdrawOrderId?: string;
          /**
           * 0:Email Sent
           * 1:Cancelled
           * 2:Awaiting Approval
           * 3:Rejected
           * 4:Processing
           * 5:Failure
           * 6:Completed
           */
          status?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          offset?: components['parameters']['offset'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of withdraw history */
        200: {
          content: {
            'application/json': {
              address?: string;
              amount?: string;
              applyTime?: string;
              coin?: string;
              id?: string;
              /** will not be returned if there's no withdrawOrderId for this withdraw. */
              withdrawOrderId?: string;
              network?: string;
              /** 1 for internal transfer, 0 for external transfer */
              transferType?: number;
              status?: number;
              transactionFee?: string;
              confirmNo?: number;
              txId?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/capital/deposit/address': {
    /**
     * Fetch deposit address with network.
     *
     * - If network is not send, return with default network of the coin.
     * - You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall (HMAC SHA256).
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Coin name */
          coin: components['parameters']['coin'];
          network?: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Deposit address info */
        200: {
          content: {
            'application/json': {
              address?: string;
              coin?: string;
              tag?: string;
              url?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/account/status': {
    /**
     * Fetch account status detail.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/account/apiTradingStatus': {
    /**
     * Fetch account API trading status with details.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Account API trading status */
        200: {
          content: {
            'application/json': {
              data?: {
                /** API trading function is locked or not */
                isLocked?: boolean;
                /** If API trading function is locked, this is the planned recover time */
                plannedRecoverTime?: number;
                triggerCondition?: {
                  /** Number of GTC orders */
                  GCR?: number;
                  /** Number of FOK/IOC orders */
                  IFER?: number;
                  /** Number of orders */
                  UFR?: number;
                };
                /** The indicators updated every 30 seconds */
                indicators?: {
                  BTCUSDT?: {
                    /** Unfilled Ratio (UFR) */
                    i?: string;
                    /** Count of all orders */
                    c?: number;
                    /** Current UFR value */
                    v?: number;
                    /** Trigger UFR value */
                    t?: number;
                  }[];
                };
                updateTime?: number;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/dribblet': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Dust log records */
        200: {
          content: {
            'application/json': {
              /** Total counts of exchange */
              total?: number;
              userAssetDribblets?: {
                operateTime?: number;
                /** Total transfered BNB amount for this exchange. */
                totalTransferedAmount?: string;
                /** Total service charge amount for this exchange. */
                totalServiceChargeAmount?: string;
                transId?: number;
                userAssetDribbletDetails?: {
                  transId?: number;
                  serviceChargeAmount?: string;
                  amount?: string;
                  operateTime?: number;
                  transferedAmount?: string;
                  fromAsset?: string;
                }[];
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/dust': {
    /**
     * Convert dust assets to BNB.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** The asset being converted. For example, asset=BTC&asset=USDT */
          asset: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Dust log records */
        200: {
          content: {
            'application/json': {
              totalServiceCharge?: string;
              totalTransfered?: string;
              transferResult?: {
                amount?: string;
                fromAsset?: string;
                operateTime?: number;
                serviceChargeAmount?: string;
                tranId?: number;
                transferedAmount?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/assetDividend': {
    /**
     * Query asset Dividend Record
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          limit: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Records of asset devidend */
        200: {
          content: {
            'application/json': {
              rows?: {
                amount?: string;
                asset?: string;
                divTime?: number;
                enInfo?: string;
                tranId?: number;
              }[];
              total?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/assetDetail': {
    /**
     * Fetch details of assets supported on Binance.
     *
     * - Please get network and other deposit or withdraw details from `GET /sapi/v1/capital/config/getall`.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Asset detail */
        200: {
          content: {
            'application/json': {
              CTR?: {
                minWithdrawAmount?: string;
                /** deposit status (false if ALL of networks' are false) */
                depositStatus?: boolean;
                withdrawFee?: number;
                /** withdrawStatus status (false if ALL of networks' are false) */
                withdrawStatus?: boolean;
                depositTip?: string;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/tradeFee': {
    /**
     * Fetch trade fee
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Trading symbol, e.g. BNBUSDT */
          symbol?: components['parameters']['optionalSymbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Trade fee info per symbol */
        200: {
          content: {
            'application/json': {
              symbol?: string;
              makerCommission?: string;
              takerCommission?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/transfer': {
    /**
     * - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Universal transfer type */
          type: components['parameters']['univTransferType'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
          fromSymbol?: components['parameters']['fromSymbol'];
          /** Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
          toSymbol?: components['parameters']['toSymbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Universal transfer history */
        200: {
          content: {
            'application/json': {
              total?: number;
              rows?: {
                asset?: string;
                amount?: string;
                type?: string;
                status?: string;
                tranId?: number;
                timestamp?: number;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * You need to enable `Permits Universal Transfer` option for the api key which requests this endpoint.
     *
     * - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *
     * ENUM of transfer types:
     * - MAIN_C2C Spot account transfer to C2C account
     * - MAIN_UMFUTURE Spot account transfer to USDⓈ-M Futures account
     * - MAIN_CMFUTURE Spot account transfer to COIN-M Futures account
     * - MAIN_MARGIN Spot account transfer to Margin（cross）account
     * - MAIN_MINING Spot account transfer to Mining account
     * - C2C_MAIN C2C account transfer to Spot account
     * - C2C_UMFUTURE C2C account transfer to USDⓈ-M Futures account
     * - C2C_MINING C2C account transfer to Mining account
     * - C2C_MARGIN C2C account transfer to Margin(cross) account
     * - UMFUTURE_MAIN USDⓈ-M Futures account transfer to Spot account
     * - UMFUTURE_C2C USDⓈ-M Futures account transfer to C2C account
     * - UMFUTURE_MARGIN USDⓈ-M Futures account transfer to Margin（cross）account
     * - CMFUTURE_MAIN COIN-M Futures account transfer to Spot account
     * - CMFUTURE_MARGIN COIN-M Futures account transfer to Margin(cross) account
     * - MARGIN_MAIN Margin（cross）account transfer to Spot account
     * - MARGIN_UMFUTURE Margin（cross）account transfer to USDⓈ-M Futures
     * - MARGIN_CMFUTURE Margin（cross）account transfer to COIN-M Futures
     * - MARGIN_MINING Margin（cross）account transfer to Mining account
     * - MARGIN_C2C Margin（cross）account transfer to C2C account
     * - MINING_MAIN Mining account transfer to Spot account
     * - MINING_UMFUTURE Mining account transfer to USDⓈ-M Futures account
     * - MINING_C2C Mining account transfer to C2C account
     * - MINING_MARGIN Mining account transfer to Margin(cross) account
     * - MAIN_PAY Spot account transfer to Pay account
     * - PAY_MAIN Pay account transfer to Spot account
     * - ISOLATEDMARGIN_MARGIN Isolated margin account transfer to Margin(cross) account
     * - MARGIN_ISOLATEDMARGIN Margin(cross) account transfer to Isolated margin account
     * - ISOLATEDMARGIN_ISOLATEDMARGIN Isolated margin account transfer to Isolated margin account
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Universal transfer type */
          type: components['parameters']['univTransferType'];
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
          fromSymbol?: components['parameters']['fromSymbol'];
          /** Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
          toSymbol?: components['parameters']['toSymbol'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              tranId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/asset/get-funding-asset': {
    /**
     * - Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          needBtcValuation?: 'true' | 'false';
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Funding asset detail */
        200: {
          content: {
            'application/json': {
              asset?: string;
              free?: string;
              locked?: string;
              freeze?: string;
              withdrawing?: string;
              btcValuation?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/account/apiRestrictions': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** API Key permissions */
        200: {
          content: {
            'application/json': {
              ipRestrict?: boolean;
              createTime?: number;
              /** This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals */
              enableWithdrawals?: boolean;
              /** This option authorizes this key to transfer funds between your master account and your sub account instantly */
              enableInternalTransfer?: boolean;
              /** Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization */
              permitsUniversalTransfer?: boolean;
              /** Authorizes this key to Vanilla options trading */
              enableVanillaOptions?: boolean;
              enableReading?: boolean;
              /** API Key created before your futures account opened does not support futures API service */
              enableFutures?: boolean;
              /** This option can be adjusted after the Cross Margin account transfer is completed */
              enableMargin?: boolean;
              enableSpotAndMarginTrading?: boolean;
              /** Expiration time for spot and margin trading permission */
              tradingAuthorityExpirationTime?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/virtualSubAccount': {
    /**
     * - This request will generate a virtual sub account under your master account.
     * - You need to enable "trade" option for the api key which requests this endpoint.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Please input a string. We will create a virtual email using that string for you to register */
          subAccountString: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Return the created virtual email */
        200: {
          content: {
            'application/json': {
              email?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/list': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email?: components['parameters']['optionalSubAccountEmail'];
          isFreeze?: 'true' | 'false';
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default 1; max 200 */
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of sub-accounts */
        200: {
          content: {
            'application/json': {
              subAccounts?: {
                email?: string;
                isFreeze?: boolean;
                createTime?: number;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/sub/transfer/history': {
    /**
     * - fromEmail and toEmail cannot be sent at the same time.
     * - Return fromEmail equal master account email by default.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          fromEmail?: components['parameters']['optionalSubAccountFromEmail'];
          /** Sub-account email */
          toEmail?: components['parameters']['optionalSubAccountToEmail'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default 1 */
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Sub-account Spot Asset Transfer History */
        200: {
          content: {
            'application/json': {
              from?: string;
              to?: string;
              asset?: string;
              qty?: string;
              status?: string;
              tranId?: number;
              time?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/futures/internalTransfer': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** 1:USDT-margined Futures, 2: Coin-margined Futures */
          futuresType: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default value: 50, Max value: 500 */
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Sub-account Futures Asset Transfer History */
        200: {
          content: {
            'application/json': {
              success?: boolean;
              futuresType?: number;
              transfers?: {
                from?: string;
                to?: string;
                asset?: string;
                qty?: string;
                tranId?: number;
                time?: number;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * - Master account can transfer max 2000 times a minute
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Sender email */
          fromEmail: components['parameters']['subAccountFromEmail'];
          /** Recipient email */
          toEmail: components['parameters']['subAccountToEmail'];
          /** 1:USDT-margined Futures,2: Coin-margined Futures */
          futuresType: number;
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Futures Asset Transfer Info */
        200: {
          content: {
            'application/json': {
              success?: boolean;
              txnId?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v3/sub-account/assets': {
    /**
     * Fetch sub-account assets
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of assets balances */
        200: {
          content: {
            'application/json': {
              balances?: {
                asset?: string;
                free?: number;
                locked?: number;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/spotSummary': {
    /**
     * Get BTC valued asset summary of subaccounts.
     *
     * Weight: 5
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default:10 Max:20 */
          size?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Summary of Sub-account Spot Assets */
        200: {
          content: {
            'application/json': {
              totalCount?: number;
              masterAccountTotalAsset?: string;
              spotSubUserAssetBtcVoList?: {
                email?: string;
                totalAsset?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/capital/deposit/subAddress': {
    /**
     * Fetch sub-account deposit address
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** Coin name */
          coin: components['parameters']['coin'];
          network?: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Deposit address info */
        200: {
          content: {
            'application/json': {
              address?: string;
              coin?: string;
              tag?: string;
              url?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/capital/deposit/subHisrec': {
    /**
     * Fetch sub-account deposit history
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** Coin name */
          coin?: components['parameters']['optionalCoin'];
          /** 0(0:pending,6: credited but cannot withdraw, 1:success) */
          status?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          limit?: number;
          offset?: components['parameters']['offset'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Sub-account deposit history */
        200: {
          content: {
            'application/json': {
              amount?: string;
              coin?: string;
              network?: string;
              status?: number;
              address?: string;
              addressTag?: string;
              txId?: string;
              insertTime?: number;
              transferType?: number;
              confirmTimes?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/status': {
    /**
     * - If no `email` sent, all sub-accounts' information will be returned.
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email?: components['parameters']['optionalSubAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Status on Margin/Futures */
        200: {
          content: {
            'application/json': {
              email?: string;
              isSubUserEnabled?: boolean;
              isUserActive?: boolean;
              /** sub account create time */
              insertTime?: number;
              isMarginEnabled?: boolean;
              isFutureEnabled?: boolean;
              /** user mobile number */
              mobile?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/margin/enable': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin status */
        200: {
          content: {
            'application/json': {
              email?: string;
              isMarginEnabled?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/margin/account': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin sub-account details */
        200: {
          content: {
            'application/json': {
              email?: string;
              marginLevel?: string;
              totalAssetOfBtc?: string;
              totalLiabilityOfBtc?: string;
              totalNetAssetOfBtc?: string;
              marginTradeCoeffVo?: {
                /** Liquidation margin ratio */
                forceLiquidationBar?: string;
                /** Margin call margin ratio */
                marginCallBar?: string;
                /** Initial margin ratio */
                normalBar?: string;
              };
              marginUserAssetVoList?: {
                asset?: string;
                borrowed?: string;
                free?: string;
                interest?: string;
                locked?: string;
                netAsset?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/margin/accountSummary': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Margin sub-account details */
        200: {
          content: {
            'application/json': {
              totalAssetOfBtc?: string;
              totalLiabilityOfBtc?: string;
              totalNetAssetOfBtc?: string;
              subAccountList?: {
                email?: string;
                totalAssetOfBtc?: string;
                totalLiabilityOfBtc?: string;
                totalNetAssetOfBtc?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/futures/enable': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Futures status */
        200: {
          content: {
            'application/json': {
              email?: string;
              isFuturesEnabled?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/futures/account': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Futures account details */
        200: {
          content: {
            'application/json': {
              email?: string;
              asset?: string;
              assets?: {
                asset?: string;
                initialMargin?: string;
                maintenanceMargin?: string;
                marginBalance?: string;
                maxWithdrawAmount?: string;
                openOrderInitialMargin?: string;
                positionInitialMargin?: string;
                unrealizedProfit?: string;
                walletBalance?: string;
              }[];
              canDeposit?: boolean;
              canTrade?: boolean;
              canWithdraw?: boolean;
              feeTier?: number;
              maxWithdrawAmount?: string;
              totalInitialMargin?: string;
              totalMaintenanceMargin?: string;
              totalMarginBalance?: string;
              totalOpenOrderInitialMargin?: string;
              totalPositionInitialMargin?: string;
              totalUnrealizedProfit?: string;
              totalWalletBalance?: string;
              updateTime?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/futures/accountSummary': {
    /** Weight: 20 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Futures account summary */
        200: {
          content: {
            'application/json': {
              totalInitialMargin?: string;
              totalMaintenanceMargin?: string;
              totalMarginBalance?: string;
              totalOpenOrderInitialMargin?: string;
              totalPositionInitialMargin?: string;
              totalUnrealizedProfit?: string;
              totalWalletBalance?: string;
              asset?: string;
              subAccountList?: {
                email?: string;
                totalInitialMargin?: string;
                totalMaintenanceMargin?: string;
                totalMarginBalance?: string;
                totalOpenOrderInitialMargin?: string;
                totalPositionInitialMargin?: string;
                totalUnrealizedProfit?: string;
                totalWalletBalance?: string;
                asset?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/futures/positionRisk': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Futures account summary */
        200: {
          content: {
            'application/json': {
              entryPrice?: string;
              /** current initial leverage */
              leverage?: string;
              /** notional value limit of current initial leverage */
              maxNotional?: string;
              liquidationPrice?: string;
              markPrice?: string;
              positionAmount?: string;
              symbol?: string;
              unrealizedProfit?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/futures/transfer': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /**
           * 1: transfer from subaccount's spot account to its USDT-margined futures account
           *
           * 2: transfer from subaccount's USDT-margined futures account to its spot account
           *
           * 3: transfer from subaccount's spot account to its COIN-margined futures account
           *
           * 4:transfer from subaccount's COIN-margined futures account to its spot account
           */
          type: 1 | 2 | 3 | 4;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              txnId?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/margin/transfer': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /**
           * 1: transfer from subaccount's spot account to margin account
           *
           * 2: transfer from subaccount's margin account to its spot account
           */
          type: 1 | 2;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              txnId?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/transfer/subToSub': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Recipient email */
          toEmail: components['parameters']['subAccountToEmail'];
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              txnId?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/transfer/subToMaster': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              txnId?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/transfer/subUserHistory': {
    /**
     * - If `type` is not sent, the records of type 2: transfer out will be returned by default.
     * - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /**
           * 1: transfer in
           *
           * 2:  transfer out
           */
          type?: 1 | 2;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              counterParty?: string;
              email?: string;
              /** 1 for transfer in, 2 for transfer out */
              type?: number;
              asset?: string;
              qty?: string;
              fromAccountType?: string;
              toAccountType?: string;
              status?: string;
              tranId?: number;
              time?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/universalTransfer': {
    /**
     * - fromEmail and toEmail cannot be sent at the same time.
     * - Return fromEmail equal master account email by default.
     * - Only get the latest history of past 30 days.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          fromEmail?: components['parameters']['optionalSubAccountFromEmail'];
          /** Sub-account email */
          toEmail?: components['parameters']['optionalSubAccountToEmail'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default 500, Max 500 */
          limit?: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer History */
        200: {
          content: {
            'application/json': {
              tranId?: number;
              fromEmail?: string;
              toEmail?: string;
              asset?: string;
              amount?: string;
              fromAccountType?: string;
              toAccountType?: string;
              status?: string;
              createTimeStamp?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * - You need to enable "internal transfer" option for the api key which requests this endpoint.
     * - Transfer from master account by default if fromEmail is not sent.
     * - Transfer to master account by default if toEmail is not sent.
     * - Transfer between futures accounts is not supported.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          /** Sub-account email */
          fromEmail?: components['parameters']['optionalSubAccountFromEmail'];
          /** Sub-account email */
          toEmail?: components['parameters']['optionalSubAccountToEmail'];
          fromAccountType: 'SPOT' | 'USDT_FUTURE' | 'COIN_FUTURE';
          toAccountType: 'SPOT' | 'USDT_FUTURE' | 'COIN_FUTURE';
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              tranId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v2/sub-account/futures/account': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /**
           * 1:USDT Margined Futures
           *
           * 2:COIN Margined Futures
           */
          futuresType: 1 | 2;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** USDT or COIN Margined Futures Details */
        200: {
          content: {
            'application/json':
              | components['schemas']['subAccountUSDTFuturesDetails']
              | components['schemas']['subAccountCOINFuturesDetails'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v2/sub-account/futures/accountSummary': {
    /** Weight: 20 */
    get: {
      parameters: {
        query: {
          /**
           * 1:USDT Margined Futures
           *
           * 2:COIN Margined Futures
           */
          futuresType: 1 | 2;
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default 10, Max 20 */
          limit?: string;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** USDT or COIN Margined Futures Summary */
        200: {
          content: {
            'application/json':
              | components['schemas']['subAccountUSDTFuturesSummary']
              | components['schemas']['subAccountCOINFuturesSummary'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v2/sub-account/futures/positionRisk': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /**
           * 1:USDT Margined Futures
           *
           * 2:COIN Margined Futures
           */
          futuresType: 1 | 2;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** USDT or COIN Margined Futures Position Risk */
        200: {
          content: {
            'application/json':
              | components['schemas']['subAccountUSDTFuturesPositionRisk']
              | components['schemas']['subAccountCOINFuturesPositionRisk'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/sub-account/blvt/enable': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** Only true for now */
          enableBlvt: boolean;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** BLVT status */
        200: {
          content: {
            'application/json': {
              email?: string;
              enableBlvt?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/managed-subaccount/deposit': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Recipient email */
          toEmail: components['parameters']['subAccountToEmail'];
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              tranId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/managed-subaccount/asset': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** Sub-account email */
          email: components['parameters']['subAccountEmail'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of asset details */
        200: {
          content: {
            'application/json': {
              coin?: string;
              name?: string;
              totalBalance?: string;
              availableBalance?: string;
              inOrder?: string;
              btcValue?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/managed-subaccount/withdraw': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** Sender email */
          fromEmail: components['parameters']['subAccountFromEmail'];
          asset: components['parameters']['asset'];
          amount: components['parameters']['amount'];
          /** Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now */
          transferDate?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Transfer id */
        200: {
          content: {
            'application/json': {
              tranId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/api/v3/userDataStream': {
    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
     *
     * Weight: 1
     */
    put: {
      parameters: {
        query: {
          /** User websocket listen key */
          listenKey?: components['parameters']['listenKey'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Start a new user data stream.
     * The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     */
    post: {
      responses: {
        /** Listen key */
        200: {
          content: {
            'application/json': {
              listenKey?: string;
            };
          };
        };
      };
    };
    /**
     * Close out a user data stream.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** User websocket listen key */
          listenKey?: components['parameters']['listenKey'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/userDataStream': {
    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
     *
     * Weight: 1
     */
    put: {
      parameters: {
        query: {
          /** User websocket listen key */
          listenKey?: components['parameters']['listenKey'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Start a new user data stream.
     * The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     */
    post: {
      responses: {
        /** Margin listen key */
        200: {
          content: {
            'application/json': {
              listenKey?: string;
            };
          };
        };
      };
    };
    /**
     * Close out a user data stream.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** User websocket listen key */
          listenKey?: components['parameters']['listenKey'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/userDataStream/isolated': {
    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
     *
     * Weight: 1
     */
    put: {
      parameters: {
        query: {
          /** User websocket listen key */
          listenKey?: components['parameters']['listenKey'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Start a new user data stream.
     * The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     */
    post: {
      responses: {
        /** Isolated margin listen key */
        200: {
          content: {
            'application/json': {
              listenKey?: string;
            };
          };
        };
      };
    };
    /**
     * Close out a user data stream.
     *
     * Weight: 1
     */
    delete: {
      parameters: {
        query: {
          /** User websocket listen key */
          listenKey?: components['parameters']['listenKey'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/fiat/orders': {
    /**
     * - If beginTime and endTime are not sent, the recent 30-day data will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** 0-deposit, 1-withdraw */
          transactionType: components['parameters']['transactionType'];
          beginTime?: components['parameters']['beginTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default 100, max 500 */
          rows?: components['parameters']['rows'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** History of deposit/withdraw orders */
        200: {
          content: {
            'application/json': {
              code?: string;
              message?: string;
              data?: {
                orderNo?: string;
                fiatCurrency?: string;
                indicatedAmount?: string;
                amount?: string;
                totalFee?: string;
                method?: string;
                /** Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped */
                status?: string;
                createTime?: number;
                updateTime?: number;
              }[];
              total?: number;
              success?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/fiat/payments': {
    /**
     * - If beginTime and endTime are not sent, the recent 30-day data will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** 0-deposit, 1-withdraw */
          transactionType: components['parameters']['transactionType'];
          beginTime?: components['parameters']['beginTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 1 */
          page?: components['parameters']['page'];
          /** Default 100, max 500 */
          rows?: components['parameters']['rows'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** History of fiat payments */
        200: {
          content: {
            'application/json': {
              code?: string;
              message?: string;
              data?: {
                orderNo?: string;
                /** Fiat trade amount */
                sourceAmount?: string;
                /** Fiat token */
                fiatCurrency?: string;
                /** Crypto trade amount */
                obtainAmount?: string;
                /** Crypto token */
                cryptoCurrency?: string;
                /** Trade fee */
                totalFee?: string;
                price?: string;
                /** Processing, Completed, Failed, Refunded */
                status?: string;
                createTime?: number;
                updateTime?: number;
              }[];
              total?: number;
              success?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/daily/product/list': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** "ALL", "SUBSCRIBABLE", "UNSUBSCRIBABLE"; Default: 'ALL' */
          status: components['parameters']['flexibleProductStatus'];
          /** "ALL", "TRUE"; Default: "ALL" */
          featured?: components['parameters']['featured'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of flexible products */
        200: {
          content: {
            'application/json': {
              asset?: string;
              avgAnnualInterestRate?: string;
              canPurchase?: boolean;
              canRedeem?: boolean;
              dailyInterestPerThousand?: string;
              featured?: boolean;
              minPurchaseAmount?: string;
              productId?: string;
              purchasedAmount?: string;
              status?: string;
              upLimit?: string;
              upLimitPerUser?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/daily/userLeftQuota': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          productId: components['parameters']['flexibleProductId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Daily purchase quote of flexible product left */
        200: {
          content: {
            'application/json': {
              asset?: string;
              leftQuota?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/daily/purchase': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          productId: components['parameters']['flexibleProductId'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Generated Purchase Id */
        200: {
          content: {
            'application/json': {
              purchaseId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/daily/userRedemptionQuota': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          productId: components['parameters']['flexibleProductId'];
          /** "FAST", "NORMAL" */
          type: components['parameters']['flexibleProductType'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Daily redemption quota of flexible product left */
        200: {
          content: {
            'application/json': {
              asset?: string;
              dailyQuota?: string;
              leftQuota?: string;
              minRedemptionAmount?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/daily/redeem': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          productId: components['parameters']['flexibleProductId'];
          amount: components['parameters']['amount'];
          /** "FAST", "NORMAL" */
          type: components['parameters']['flexibleProductType'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {[key: string]: unknown};
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/daily/token/position': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of flexible product positions */
        200: {
          content: {
            'application/json': {
              annualInterestRate?: string;
              asset?: string;
              avgAnnualInterestRate?: string;
              canRedeem?: boolean;
              dailyInterestRate?: string;
              freeAmount?: string;
              freezeAmount?: string;
              lockedAmount?: string;
              productId?: string;
              productName?: string;
              redeemingAmount?: string;
              todayPurchasedAmount?: string;
              totalAmount?: string;
              totalInterest?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/project/list': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          asset?: components['parameters']['optionalAsset'];
          /** "ACTIVITY", "CUSTOMIZED_FIXED" */
          type: components['parameters']['fixedAndActivityProductType'];
          /** "ALL", "SUBSCRIBABLE", "UNSUBSCRIBABLE"; Default: 'ALL' */
          status: components['parameters']['fixedAndActivityProductStatus'];
          /** default "true" */
          isSortAsc: components['parameters']['isSortAsc'];
          /** "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME */
          sortBy: components['parameters']['sortBy'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of fixed projects */
        200: {
          content: {
            'application/json': {
              asset?: string;
              displayPriority?: number;
              duration?: number;
              interestPerLot?: string;
              interestRate?: string;
              lotSize?: string;
              lotsLowLimit?: number;
              lotsPurchased?: number;
              lotsUpLimit?: number;
              maxLotsPerUser?: number;
              needKyc?: boolean;
              projectId?: string;
              projectName?: string;
              status?: string;
              type?: string;
              withAreaLimitation?: boolean;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/customizedFixed/purchase': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          projectId: components['parameters']['projectId'];
          lot: components['parameters']['lot'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Generated Purchase Id */
        200: {
          content: {
            'application/json': {
              purchaseId?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/project/position/list': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          asset: components['parameters']['asset'];
          projectId: components['parameters']['fixedAndActivityProjectId'];
          /** "ALL", "SUBSCRIBABLE", "UNSUBSCRIBABLE"; Default: 'ALL' */
          status: components['parameters']['fixedAndActivityProductStatus'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of fixed project positions */
        200: {
          content: {
            'application/json': {
              asset?: string;
              canTransfer?: boolean;
              createTimestamp?: number;
              duration?: number;
              endTime?: number;
              interest?: string;
              interestRate?: string;
              lot?: number;
              positionId?: number;
              principal?: string;
              projectId?: string;
              projectName?: string;
              purchaseTime?: number;
              redeemDate?: string;
              startTime?: number;
              status?: string;
              type?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/union/account': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Lending account */
        200: {
          content: {
            'application/json': {
              positionAmountVos?: {
                amount?: string;
                amountInBTC?: string;
                amountInUSDT?: string;
                asset?: string;
              }[];
              totalAmountInBTC?: string;
              totalAmountInUSDT?: string;
              totalFixedAmountInBTC?: string;
              totalFixedAmountInUSDT?: string;
              totalFlexibleInBTC?: string;
              totalFlexibleInUSDT?: string;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/union/purchaseRecord': {
    /**
     * - The time between startTime and endTime cannot be longer than 30 days.
     * - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** "DAILY" for flexible, "ACTIVITY" for activity, "CUSTOMIZED_FIXED" for fixed */
          lendingType: components['parameters']['lendingType'];
          asset?: components['parameters']['optionalAsset'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of flexible or Fixed/Activity products */
        200: {
          content: {
            'application/json':
              | components['schemas']['savingsFlexiblePurchaseRecord']
              | components['schemas']['savingsFixedActivityPurchaseRecord'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/union/redemptionRecord': {
    /**
     * - The time between startTime and endTime cannot be longer than 30 days.
     * - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** "DAILY" for flexible, "ACTIVITY" for activity, "CUSTOMIZED_FIXED" for fixed */
          lendingType: components['parameters']['lendingType'];
          asset?: components['parameters']['optionalAsset'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** History of Flexible or Fixed/Activity Redemptions */
        200: {
          content: {
            'application/json':
              | components['schemas']['savingsFlexibleRedemptionRecord']
              | components['schemas']['savingsFixedActivityRedemptionRecord'];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/union/interestHistory': {
    /**
     * - The time between startTime and endTime cannot be longer than 30 days.
     * - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** "DAILY" for flexible, "ACTIVITY" for activity, "CUSTOMIZED_FIXED" for fixed */
          lendingType: components['parameters']['lendingType'];
          asset?: components['parameters']['optionalAsset'];
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Current querying page. Start from 1. Default:1 */
          current?: components['parameters']['current'];
          /** Default:10 Max:100 */
          size?: components['parameters']['size'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** History of interest */
        200: {
          content: {
            'application/json': {
              asset?: string;
              interest?: string;
              lendingType?: string;
              productName?: string;
              time?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/lending/positionChanged': {
    /**
     * - PositionId is mandatory parameter for fixed position.
     *
     * Weight: 1
     */
    post: {
      parameters: {
        query: {
          projectId: components['parameters']['projectId'];
          lot: components['parameters']['lot'];
          positionId?: components['parameters']['optionalPositionId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Purchase information */
        200: {
          content: {
            'application/json': {
              dailyPurchaseId?: number;
              success?: boolean;
              time?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/pub/algoList': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Algorithm information */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                algoName?: string;
                algoId?: number;
                poolIndex?: number;
                unit?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/pub/coinList': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Coin information */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                coinName?: string;
                coinId?: number;
                poolIndex?: number;
                algoId?: number;
                algoName?: string;
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/worker/detail': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** Miner’s name */
          workerName: components['parameters']['workerName'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of workers' hashrates' */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                /** Mining Account name */
                workerName?: string;
                /** Type of hourly hashrate */
                type?: string;
                hashrateDatas?: {
                  time?: number;
                  hashrate?: string;
                  /** Rejection Rate */
                  reject?: number;
                }[];
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/worker/list': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** Page number, default is first page, start form 1 */
          pageIndex?: components['parameters']['pageIndex'];
          /** sort sequence（default=0）0 positive sequence, 1 negative sequence */
          sort?: components['parameters']['sort'];
          /** Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time */
          sortColumn?: components['parameters']['sortColumn'];
          /** miners status（default=0）0 all, 1 valid, 2 invalid, 3 failure */
          workerStatus?: components['parameters']['workerStatus'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of workers */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                workerDatas?: {
                  workerId?: string;
                  workerName?: string;
                  /** Status：1 valid, 2 invalid, 3 no longer valid */
                  status?: number;
                  /** Real-time rate */
                  hashRate?: number;
                  /** 24H Hashrate */
                  dayHashRate?: number;
                  /** Real-time Rejection Rate */
                  rejectRate?: number;
                  /** Last submission time */
                  lastShareTime?: number;
                }[];
                totalNum?: number;
                pageSize?: number;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/payment/list': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** Coin name */
          coin?: components['parameters']['optionalCoin'];
          /** Search date, millisecond timestamp, while empty query all */
          startDate?: components['parameters']['startDate'];
          /** Search date, millisecond timestamp, while empty query all */
          endDate?: components['parameters']['endDate'];
          /** Page number, default is first page, start form 1 */
          pageIndex?: components['parameters']['pageIndex'];
          /** Number of pages, minimum 10, maximum 200 */
          pageSize?: components['parameters']['pageSize'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of earnings */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                accountProfits?: {
                  /** Mining date */
                  time?: number;
                  /** 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings */
                  type?: number;
                  /** Transferred Hashrate */
                  hashTransfer?: number;
                  /** Transferred Income */
                  transferAmount?: number;
                  /** Daily Hashrate */
                  dayHashRate?: number;
                  /** Earnings Amount */
                  profitAmount?: number;
                  /** Coin Type */
                  coinName?: string;
                  /** Status：0:Unpaid, 1:Paying  2：Paid */
                  status?: number;
                }[];
                /** Total Rows */
                totalNum?: number;
                /** Rows per page */
                pageSize?: number;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/payment/other': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** Coin name */
          coin?: components['parameters']['optionalCoin'];
          /** Search date, millisecond timestamp, while empty query all */
          startDate?: components['parameters']['startDate'];
          /** Search date, millisecond timestamp, while empty query all */
          endDate?: components['parameters']['endDate'];
          /** Page number, default is first page, start form 1 */
          pageIndex?: components['parameters']['pageIndex'];
          /** Number of pages, minimum 10, maximum 200 */
          pageSize?: components['parameters']['pageSize'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of extra bonuses */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                otherProfits?: {
                  /** Mining date */
                  time?: number;
                  /** Coin Name */
                  coinName?: string;
                  /** 1: Merged Mining, 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings */
                  type?: number;
                  profitAmount?: number;
                  /** 0:Unpaid, 1:Paying  2：Paid */
                  status?: number;
                }[];
                /** Total Rows */
                totalNum?: number;
                /** Rows per page */
                pageSize?: number;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/hash-transfer/config/details/list': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Page number, default is first page, start form 1 */
          pageIndex?: components['parameters']['pageIndex'];
          /** Number of pages, minimum 10, maximum 200 */
          pageSize?: components['parameters']['pageSize'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of hashrate resales */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                configDetails?: {
                  /** Mining ID */
                  configId?: number;
                  /** Transfer out of subaccount */
                  poolUsername?: string;
                  /** Transfer into subaccount */
                  toPoolUsername?: string;
                  /** Transfer algorithm */
                  algoName?: string;
                  /** Transferred Hashrate quantity */
                  hashRate?: number;
                  /** Start date */
                  startDay?: number;
                  /** End date */
                  endDay?: number;
                  /** 0 Processing, 1：Cancelled, 2：Terminated */
                  status?: number;
                }[];
                totalNum?: number;
                pageSize?: number;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/hash-transfer/profit/details': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Mining ID */
          configId: components['parameters']['configId'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** Page number, default is first page, start form 1 */
          pageIndex?: components['parameters']['pageIndex'];
          /** Number of pages, minimum 10, maximum 200 */
          pageSize?: components['parameters']['pageSize'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of hashrate resale details */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                profitTransferDetails?: {
                  /** Transfer out of sub-account */
                  poolUsername?: string;
                  /** Transfer into subaccount */
                  toPoolUsername?: string;
                  /** Transfer algorithm */
                  algoName?: string;
                  /** Transferred Hashrate quantity */
                  hashRate?: number;
                  /** Transfer date */
                  day?: number;
                  /** Transfer income */
                  amount?: number;
                  coinName?: string;
                }[];
                totalNum?: number;
                pageSize?: number;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/hash-transfer/config': {
    /** Weight: 5 */
    post: {
      parameters: {
        query: {
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Search date, millisecond timestamp, while empty query all */
          startDate?: components['parameters']['startDate'];
          /** Search date, millisecond timestamp, while empty query all */
          endDate?: components['parameters']['endDate'];
          /** Mining Account */
          toPoolUser: components['parameters']['toPoolUser'];
          /** Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) */
          hashRate: components['parameters']['hashRate'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Mining Account Id */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              /** Mining Account */
              data?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/hash-transfer/config/cancel': {
    /** Weight: 5 */
    post: {
      parameters: {
        query: {
          /** Mining ID */
          configId: components['parameters']['configId'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Success flag */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/statistics/user/status': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Mining account statistics */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                fifteenMinHashRate?: string;
                dayHashRate?: string;
                validNum?: number;
                invalidNum?: number;
                profitToday?: {
                  BTC?: string;
                  BSV?: string;
                  BCH?: string;
                };
                profitYesterday?: {
                  BTC?: string;
                  BSV?: string;
                  BCH?: string;
                };
                userName?: string;
                unit?: string;
                algo?: string;
              };
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/mining/statistics/user/list': {
    /** Weight: 5 */
    get: {
      parameters: {
        query: {
          /** Algorithm(sha256) */
          algo: components['parameters']['algo'];
          /** Mining Account */
          userName: components['parameters']['userName'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of mining accounts */
        200: {
          content: {
            'application/json': {
              code?: number;
              msg?: string;
              data?: {
                type?: string;
                userName?: string;
                list?: {
                  time?: number;
                  hashrate?: string;
                  reject?: string;
                }[];
              }[];
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/blvt/tokenInfo': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** BTCDOWN, BTCUP */
          tokenName?: components['parameters']['optionalBlvtTokenName'];
        };
      };
      responses: {
        /** List of token information */
        200: {
          content: {
            'application/json': {
              tokenName?: string;
              description?: string;
              underlying?: string;
              tokenIssued?: string;
              basket?: string;
              currentBaskets?: {
                symbol?: string;
                amount?: string;
                notionalValue?: string;
              }[];
              nav?: string;
              realLeverage?: string;
              fundingRate?: string;
              dailyManagementFee?: string;
              purchaseFeePct?: string;
              dailyPurchaseLimit?: string;
              redeemFeePct?: string;
              dailyRedeemLimit?: string;
              timstamp?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/blvt/subscribe': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** BTCDOWN, BTCUP */
          tokenName: components['parameters']['blvtTokenName'];
          /** Spot balance */
          cost: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Subscription Info */
        200: {
          content: {
            'application/json': {
              id?: number;
              /** S, P, and F for "success", "pending", and "failure" */
              status?: string;
              tokenName?: string;
              /** subscribed token amount */
              amount?: string;
              /** subscription cost in usdt */
              cost?: string;
              timstamp?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/blvt/subscribe/record': {
    /**
     * - Only the data of the latest 90 days is available
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** BTCDOWN, BTCUP */
          tokenName?: components['parameters']['optionalBlvtTokenName'];
          id?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of subscription record */
        200: {
          content: {
            'application/json': {
              id?: number;
              tokenName?: string;
              /** Subscription amount */
              amount?: string;
              /** NAV price of subscription */
              nav?: string;
              /** Subscription fee in usdt */
              fee?: string;
              /** Subscription cost in usdt */
              totalCharge?: string;
              timstamp?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/blvt/redeem': {
    /** Weight: 1 */
    post: {
      parameters: {
        query: {
          /** BTCDOWN, BTCUP */
          tokenName: components['parameters']['blvtTokenName'];
          amount: components['parameters']['amount'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Redemption record */
        200: {
          content: {
            'application/json': {
              id?: number;
              /** S, P, and F for "success", "pending", and "failure" */
              status?: string;
              tokenName?: string;
              /** Redemption token amount */
              redeemAmount?: string;
              /** Redemption value in usdt */
              amount?: string;
              timstamp?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/blvt/redeem/record': {
    /**
     * - Only the data of the latest 90 days is available
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          /** BTCDOWN, BTCUP */
          tokenName?: components['parameters']['optionalBlvtTokenName'];
          id?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** default 1000, max 1000 */
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of redemption record */
        200: {
          content: {
            'application/json': {
              id?: number;
              tokenName?: string;
              /** Redemption amount */
              amount?: string;
              /** NAV of redemption */
              nav?: string;
              /** Reemption fee */
              fee?: string;
              /** Net redemption value in usdt */
              netProceed?: string;
              timstamp?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/blvt/userLimit': {
    /** Weight: 1 */
    get: {
      parameters: {
        query: {
          /** BTCDOWN, BTCUP */
          tokenName?: components['parameters']['optionalBlvtTokenName'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** List of token limits */
        200: {
          content: {
            'application/json': {
              tokenName?: string;
              /** USDT */
              userDailyTotalPurchaseLimit?: string;
              /** USDT */
              userDailyTotalRedeemLimit?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/pools': {
    /**
     * Get metadata about all swap pools.
     *
     * Weight: 1
     */
    get: {
      responses: {
        /** List of Swap Pools */
        200: {
          content: {
            'application/json': {
              poolId?: number;
              poolName?: string;
              assets?: string[];
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/liquidity': {
    /**
     * Get liquidity information and user share of a pool.
     *
     * Weight:\
     * `1`  for one pool\
     * `10` when the poolId parameter is omitted
     */
    get: {
      parameters: {
        query: {
          poolId?: components['parameters']['optionalPoolId'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Pool Liquidation information */
        200: {
          content: {
            'application/json': {
              poolId?: number;
              poolNmae?: string;
              updateTime?: number;
              liquidity?: {
                BUSD?: number;
                USDT?: number;
              };
              share?: {
                shareAmount?: number;
                sharePercentage?: number;
                asset?: {
                  BUSD?: number;
                  USDT?: number;
                };
              };
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/liquidityAdd': {
    /**
     * Add liquidity to a pool.
     *
     * Weight: 2
     */
    post: {
      parameters: {
        query: {
          poolId: components['parameters']['poolId'];
          asset: components['parameters']['asset'];
          quantity: components['parameters']['quantity'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Operation Id */
        200: {
          content: {
            'application/json': {
              operationId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/liquidityRemove': {
    /**
     * Remove liquidity from a pool, `type` include `SINGLE` and `COMBINATION`, asset is mandatory for single asset removal
     *
     * Weight: 2
     */
    post: {
      parameters: {
        query: {
          poolId: components['parameters']['poolId'];
          /** Can be `SINGLE` for single asset removal, `COMBINATION` for combination of all coins removal */
          type: 'SINGLE' | 'COMBINATION';
          /** Mandatory for single asset removal */
          asset?: string;
          shareAmount: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Operation Id */
        200: {
          content: {
            'application/json': {
              operationId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/liquidityOps': {
    /**
     * Get liquidity operation (add/remove) records.
     *
     * Weight: 2
     */
    get: {
      parameters: {
        query: {
          operationId?: number;
          poolId?: components['parameters']['optionalPoolId'];
          operation?: 'ADD' | 'REMOVE';
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** Default 500; max 1000. */
          limit?: components['parameters']['limit'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Liquidity Operation Record */
        200: {
          content: {
            'application/json': {
              operationId?: number;
              poolId?: number;
              poolName?: string;
              /** "ADD" or "REMOVE" */
              operation?: string;
              /** 0: pending, 1: success, 2: failed */
              status?: number;
              updateTime?: number;
              shareAmount?: string;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/quote': {
    /**
     * Request a quote for swap quote asset (selling asset) for base asset (buying asset), essentially price/exchange rates.
     *
     * quoteQty is quantity of quote asset (to sell).
     *
     * Please be noted the quote is for reference only, the actual price will change as the liquidity changes, it's recommended to swap immediate after request a quote for slippage prevention.
     *
     * Weight: 2
     */
    get: {
      parameters: {
        query: {
          quoteAsset: components['parameters']['quoteAsset'];
          baseAsset: components['parameters']['baseAsset'];
          quoteQty: components['parameters']['quoteQty'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Quote Info */
        200: {
          content: {
            'application/json': {
              quoteAsset?: string;
              baseAsset?: string;
              quoteQty?: number;
              baseQty?: number;
              price?: number;
              slippage?: number;
              fee?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/bswap/swap': {
    /**
     * Get swap history.
     *
     * Weight: 2
     */
    get: {
      parameters: {
        query: {
          swapId?: number;
          /** UTC timestamp in ms */
          startTime?: components['parameters']['startTime'];
          /** UTC timestamp in ms */
          endTime?: components['parameters']['endTime'];
          /** 0: pending for swap, 1: success, 2: failed */
          status?: 0 | 1 | 2;
          quoteAsset?: string;
          baseAsset?: string;
          /** default 3, max 100 */
          limit?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Swap History */
        200: {
          content: {
            'application/json': {
              swapId?: number;
              /** 0: pending, 1: success, 2: failed */
              swapTime?: number;
              status?: number;
              quoteAsset?: string;
              baseAsset?: string;
              quoteQty?: number;
              baseQty?: number;
              price?: number;
              fee?: number;
            }[];
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
    /**
     * Swap `quoteAsset` for `baseAsset`.
     *
     * Weight: 2
     */
    post: {
      parameters: {
        query: {
          quoteAsset: components['parameters']['quoteAsset'];
          baseAsset: components['parameters']['baseAsset'];
          quoteQty: components['parameters']['quoteQty'];
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Swap Id */
        200: {
          content: {
            'application/json': {
              swapId?: number;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
  '/sapi/v1/c2c/orderMatch/listUserOrderHistory': {
    /**
     * - If startTimestamp and endTimestamp are not sent, the recent 30-day data will be returned.
     * - The max interval between startTimestamp and endTimestamp is 30 days.
     *
     * Weight: 1
     */
    get: {
      parameters: {
        query: {
          tradeType?: 'BUY' | 'SELL';
          /** UTC timestamp in ms */
          startTimestamp?: number;
          /** UTC timestamp in ms */
          endTimestamp?: number;
          /** Default 1 */
          page?: components['parameters']['page'];
          /** default 100, max 100 */
          rows?: number;
          /** The value cannot be greater than 60000 */
          recvWindow?: components['parameters']['recvWindow'];
          /** UTC timestamp in ms */
          timestamp: components['parameters']['timestamp'];
          /** Signature */
          signature: components['parameters']['signature'];
        };
      };
      responses: {
        /** Trades history */
        200: {
          content: {
            'application/json': {
              code?: string;
              message?: string;
              data?: {
                orderNumber?: string;
                advNo?: string;
                tradeType?: string;
                asset?: string;
                fiat?: string;
                fiatSymbol?: string;
                /** Quantity (in Crypto) */
                amount?: string;
                totalPrice?: string;
                /** Unit Price (in Fiat) */
                unitPrice?: string;
                /** PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM */
                orderStatus?: string;
                createTime?: number;
                /** Transaction Fee (in Crypto) */
                commission?: string;
                counterPartNickName?: string;
                advertisementRole?: string;
              }[];
              total?: number;
              success?: boolean;
            };
          };
        };
        /** Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
        /** Unauthorized Request */
        401: {
          content: {
            'application/json': components['schemas']['error'];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    account: {
      makerCommission?: number;
      takerCommission?: number;
      buyerCommission?: number;
      sellerCommission?: number;
      canTrade?: boolean;
      canWithdraw?: boolean;
      canDeposit?: boolean;
      updateTime?: number;
      accountType?: string;
      balances?: {
        asset?: string;
        free?: string;
        locked?: string;
      }[];
    };
    order: {
      symbol?: string;
      origClientOrderId?: string;
      orderId?: number;
      /** Unless OCO, value will be -1 */
      orderListId?: number;
      clientOrderId?: string;
      price?: number;
      origQty?: number;
      executedQty?: number;
      cummulativeQuoteQty?: number;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
    };
    orderDetails: {
      symbol?: string;
      orderId?: number;
      /** Unless OCO, value will be -1 */
      orderListId?: number;
      clientOrderId?: string;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
      stopPrice?: string;
      icebergQty?: string;
      time?: number;
      updateTime?: number;
      isWorking?: boolean;
      origQuoteOrderQty?: string;
    };
    orderResponseAck: {
      symbol?: string;
      orderId?: number;
      orderListId?: number;
      clientOrderId?: string;
      transactTime?: number;
    };
    orderResponseResult: {
      symbol?: string;
      orderId?: number;
      orderListId?: number;
      clientOrderId?: string;
      transactTime?: number;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
    };
    orderResponseFull: {
      symbol?: string;
      orderId?: number;
      orderListId?: number;
      clientOrderId?: string;
      transactTime?: number;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
      fills?: {
        price?: string;
        qty?: string;
        commission?: string;
        commissionAsset?: string;
      }[];
    };
    marginOrder: {
      symbol?: string;
      orderId?: number;
      origClientOrderId?: string;
      clientOrderId?: string;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
    };
    marginOrderDetail: {
      clientOrderId?: string;
      cummulativeQuoteQty?: string;
      executedQty?: string;
      icebergQty?: string;
      isWorking?: boolean;
      orderId?: number;
      origQty?: string;
      price?: string;
      side?: string;
      status?: string;
      stopPrice?: string;
      symbol?: string;
      isIsolated?: boolean;
      time?: number;
      timeInForce?: string;
      type?: string;
      updateTime?: number;
    };
    canceledMarginOrderDetail: {
      symbol?: string;
      isIsolated?: boolean;
      origClientOrderId?: string;
      orderId?: number;
      orderListId?: number;
      clientOrderId?: string;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
    };
    marginOrderResponseAck: {
      symbol?: string;
      orderId?: number;
      clientOrderId?: string;
      isIsolated?: boolean;
      transactTime?: number;
    };
    marginOrderResponseResult: {
      symbol?: string;
      orderId?: number;
      clientOrderId?: string;
      transactTime?: number;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      isIsolated?: boolean;
      side?: string;
    };
    marginOrderResponseFull: {
      symbol?: string;
      orderId?: number;
      clientOrderId?: string;
      transactTime?: number;
      price?: string;
      origQty?: string;
      executedQty?: string;
      cummulativeQuoteQty?: string;
      status?: string;
      timeInForce?: string;
      type?: string;
      side?: string;
      /** will not return if no margin trade happens */
      marginBuyBorrowAmount?: number;
      /** will not return if no margin trade happens */
      marginBuyBorrowAsset?: string;
      isIsolated?: boolean;
      fills?: {
        price?: string;
        qty?: string;
        commission?: string;
        commissionAsset?: string;
      }[];
    };
    marginTrade: {
      commission?: string;
      commissionAsset?: string;
      id?: number;
      isBestMatch?: boolean;
      isBuyer?: boolean;
      isMaker?: boolean;
      orderId?: number;
      price?: string;
      qty?: string;
      symbol?: string;
      isIsolated?: boolean;
      time?: number;
    };
    marginTransferDetails: {
      rows?: {
        amount?: string;
        asset?: string;
        status?: string;
        timestamp?: number;
        txId?: number;
        transFrom?: string;
        transTo?: string;
      }[];
      total?: number;
    };
    isolatedMarginAccountInfo: {
      assets?: {
        baseAsset?: {
          asset?: string;
          borrowEnabled?: boolean;
          borrowed?: string;
          free?: string;
          interest?: string;
          locked?: string;
          netAsset?: string;
          netAssetOfBtc?: string;
          repayEnabled?: boolean;
          totalAsset?: string;
        };
        quoteAsset?: {
          asset?: string;
          borrowEnabled?: boolean;
          borrowed?: string;
          free?: string;
          interest?: string;
          locked?: string;
          netAsset?: string;
          netAssetOfBtc?: string;
          repayEnabled?: boolean;
          totalAsset?: string;
        };
        symbol?: string;
        isolatedCreated?: boolean;
        /** true-enabled, false-disabled */
        enabled?: boolean;
        marginLevel?: string;
        /** "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION" */
        marginLevelStatus?: string;
        marginRatio?: string;
        indexPrice?: string;
        liquidatePrice?: string;
        liquidateRate?: string;
        tradeEnabled?: boolean;
      }[];
      totalAssetOfBtc?: string;
      totalLiabilityOfBtc?: string;
      totalNetAssetOfBtc?: string;
    };
    bookTickerList: components['schemas']['bookTicker'][];
    bookTicker: {
      symbol?: string;
      bidPrice?: string;
      bidQty?: string;
      askPrice?: string;
      askQty?: string;
    };
    priceTickerList: components['schemas']['priceTicker'][];
    priceTicker: {
      symbol?: string;
      price?: string;
    };
    tickerList: components['schemas']['ticker'][];
    ticker: {
      symbol?: string;
      priceChange?: string;
      priceChangePercent?: string;
      prevClosePrice?: string;
      lastPrice?: string;
      bidPrice?: string;
      bidQty?: string;
      askPrice?: string;
      askQty?: string;
      openPrice?: string;
      highPrice?: string;
      lowPrice?: string;
      volume?: string;
      quoteVolume?: string;
      openTime?: number;
      closeTime?: number;
      firstId?: number;
      lastId?: number;
      count?: number;
    };
    myTrade: {
      symbol?: string;
      /** Trade id */
      id?: number;
      orderId?: number;
      orderListId?: number;
      /** Price */
      price?: string;
      /** Amount of base asset */
      qty?: string;
      /** Amount of quote asset */
      quoteQty?: string;
      commission?: string;
      commissionAsset?: string;
      /** Trade timestamp */
      time?: number;
      isBuyer?: boolean;
      isMaker?: boolean;
      isBestMatch?: boolean;
    };
    transaction: {
      /** transaction id */
      tranId?: number;
    };
    trade: {
      /** trade id */
      id?: number;
      /** price */
      price?: string;
      /** amount of base asset */
      qty?: string;
      /** amount of quote asset */
      quoteQty?: string;
      /** Trade executed timestamp, as same as `T` in the stream */
      time?: number;
      isBuyerMaker?: boolean;
      isBestMatch?: boolean;
    };
    aggTrade: {
      /** Aggregate tradeId */
      a?: number;
      /** Price */
      p?: string;
      /** Quantity */
      q?: string;
      /** First tradeId */
      f?: number;
      /** Last tradeId */
      l?: number;
      /** Timestamp */
      T?: boolean;
      /** Was the buyer the maker? */
      m?: boolean;
      /** Was the trade the best price match? */
      M?: boolean;
    };
    bnbBurnStatus: {
      spotBNBBurn?: boolean;
      interestBNBBurn?: boolean;
    };
    snapshotSpot: {
      code?: number;
      msg?: string;
      snapshotVos?: {
        data?: {
          balances?: {
            asset?: string;
            free?: string;
            locked?: string;
          }[];
          totalAssetOfBtc?: string;
        };
        type?: string;
        updateTime?: number;
      }[];
    };
    snapshotMargin: {
      code?: number;
      msg?: string;
      snapshotVos?: {
        data?: {
          marginLevel?: string;
          totalAssetOfBtc?: string;
          totalLiabilityOfBtc?: string;
          totalNetAssetOfBtc?: string;
          userAssets?: {
            asset?: string;
            borrowed?: string;
            free?: string;
            interest?: string;
            locked?: string;
            netAsset?: string;
          }[];
        };
        type?: string;
        updateTime?: number;
      }[];
    };
    snapshotFutures: {
      code?: number;
      msg?: string;
      snapshotVos?: {
        data?: {
          assets?: {
            asset?: string;
            marginBalance?: string;
            walletBalance?: string;
          }[];
          position?: {
            entryPrice?: string;
            markPrice?: string;
            positionAmt?: string;
            symbol?: string;
            unRealizedProfit?: string;
          }[];
        };
        type?: string;
        updateTime?: number;
      }[];
    };
    subAccountUSDTFuturesDetails: {
      futureAccountResp?: {
        email?: string;
        assets?: {
          asset?: string;
          initialMargin?: string;
          maintenanceMargin?: string;
          marginBalance?: string;
          maxWithdrawAmount?: string;
          openOrderInitialMargin?: string;
          positionInitialMargin?: string;
          unrealizedProfit?: string;
          walletBalance?: string;
        }[];
        canDeposit?: boolean;
        canTrade?: boolean;
        canWithdraw?: boolean;
        feeTier?: number;
        maxWithdrawAmount?: string;
        totalInitialMargin?: string;
        totalMaintenanceMargin?: string;
        totalMarginBalance?: string;
        totalOpenOrderInitialMargin?: string;
        totalPositionInitialMargin?: string;
        totalUnrealizedProfit?: string;
        totalWalletBalance?: string;
        updateTime?: number;
      };
    };
    subAccountCOINFuturesDetails: {
      email?: string;
      assets?: {
        asset?: string;
        initialMargin?: string;
        maintenanceMargin?: string;
        marginBalance?: string;
        maxWithdrawAmount?: string;
        openOrderInitialMargin?: string;
        positionInitialMargin?: string;
        unrealizedProfit?: string;
        walletBalance?: string;
      }[];
      canDeposit?: boolean;
      canTrade?: boolean;
      canWithdraw?: boolean;
      feeTier?: number;
      updateTime?: number;
    };
    subAccountUSDTFuturesSummary: {
      futureAccountSummaryResp?: {
        totalInitialMargin?: string;
        totalMaintenanceMargin?: string;
        totalMarginBalance?: string;
        totalOpenOrderInitialMargin?: string;
        totalPositionInitialMargin?: string;
        totalUnrealizedProfit?: string;
        totalWalletBalance?: string;
        /** The sum of BUSD and USDT */
        asset?: string;
        subAccountList?: {
          email?: string;
          totalInitialMargin?: string;
          totalMaintenanceMargin?: string;
          totalMarginBalance?: string;
          totalOpenOrderInitialMargin?: string;
          totalPositionInitialMargin?: string;
          totalUnrealizedProfit?: string;
          totalWalletBalance?: string;
          /** The sum of BUSD and USDT */
          asset?: string;
        }[];
      };
    };
    subAccountCOINFuturesSummary: {
      deliveryAccountSummaryResp?: {
        totalMarginBalanceOfBTC?: string;
        totalUnrealizedProfitOfBTC?: string;
        totalWalletBalanceOfBTC?: string;
        asset?: string;
        subAccountList?: {
          email?: string;
          totalMarginBalance?: string;
          totalUnrealizedProfit?: string;
          totalWalletBalance?: string;
          asset?: string;
        }[];
      };
    };
    subAccountUSDTFuturesPositionRisk: {
      futurePositionRiskVos?: {
        entryPrice?: string;
        /** current initial leverage */
        leverage?: string;
        /** notional value limit of current initial leverage */
        maxNotional?: string;
        liquidationPrice?: string;
        markPrice?: string;
        positionAmount?: string;
        symbol?: string;
        unrealizedProfit?: string;
      }[];
    };
    subAccountCOINFuturesPositionRisk: {
      deliveryPositionRiskVos?: {
        entryPrice?: string;
        markPrice?: string;
        leverage?: string;
        isolated?: string;
        isolatedWallet?: string;
        isolatedMargin?: string;
        isAutoAddMargin?: string;
        positionSide?: string;
        positionAmount?: string;
        symbol?: string;
        unrealizedProfit?: string;
      }[];
    };
    savingsFlexiblePurchaseRecord: {
      amount?: string;
      asset?: string;
      createTime?: number;
      lendingType?: string;
      productName?: string;
      purchaseId?: number;
      status?: string;
    }[];
    savingsFixedActivityPurchaseRecord: {
      amount?: string;
      asset?: string;
      createTime?: number;
      lendingType?: string;
      lot?: number;
      productName?: string;
      purchaseId?: number;
      status?: string;
    }[];
    savingsFlexibleRedemptionRecord: {
      amount?: string;
      asset?: string;
      createTime?: number;
      principal?: string;
      projectId?: string;
      projectName?: string;
      status?: string;
      type?: string;
    }[];
    savingsFixedActivityRedemptionRecord: {
      amount?: string;
      asset?: string;
      createTime?: number;
      interest?: string;
      principal?: string;
      projectId?: string;
      projectName?: string;
      startTime?: number;
      status?: string;
    }[];
    error: {
      /** Error code */
      code?: number;
      /** Error message */
      msg?: string;
    };
  };
  parameters: {
    asset: string;
    amount: number;
    /** Current querying page. Start from 1. Default:1 */
    current: number;
    /** Coin name */
    optionalCoin: string;
    /** Coin name */
    coin: string;
    /** SELL or BUY */
    side: 'SELL' | 'BUY';
    /** Default:10 Max:100 */
    size: number;
    /** Trading symbol, e.g. BNBUSDT */
    symbol: string;
    /** Trading symbol, e.g. BNBUSDT */
    optionalSymbol: string;
    optionalAsset: string;
    /** Default 500; max 1000. */
    limit: number;
    /** User websocket listen key */
    listenKey: string;
    /** Trade id to fetch from. Default gets most recent trades. */
    fromId: number;
    offset: number;
    /** Order id */
    orderId: number;
    /** Order list id */
    orderListId: number;
    /** Order id from client */
    origClientOrderId: string;
    /** A unique Id for the entire orderList */
    listClientOrderId: string;
    /** Used to uniquely identify this cancel. Automatically generated by default */
    newClientOrderId: string;
    /** Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
    newOrderRespType: 'ACK' | 'RESULT' | 'FULL';
    /** Set the response JSON. */
    ocoNewOrderRespType: 'ACK' | 'RESULT' | 'FULL';
    /** UTC timestamp in ms */
    startTime: number;
    /** UTC timestamp in ms */
    endTime: number;
    /** Order price */
    price: number;
    /** Order price */
    optionalPrice: number;
    quantity: number;
    /** Order quantity */
    optionalQuantity: number;
    /** The value cannot be greater than 60000 */
    recvWindow: number;
    /** UTC timestamp in ms */
    timestamp: number;
    /** Order time in force */
    timeInForce: 'GTC' | 'IOC' | 'FOK';
    type: number;
    /** Order type */
    orderType:
      | 'LIMIT'
      | 'MARKET'
      | 'STOP_LOSS'
      | 'STOP_LOSS_LIMIT'
      | 'TAKE_PROFIT'
      | 'TAKE_PROFIT_LIMIT'
      | 'LIMIT_MAKER';
    /** Universal transfer type */
    univTransferType:
      | 'MAIN_C2C'
      | 'MAIN_UMFUTURE'
      | 'MAIN_CMFUTURE'
      | 'MAIN_MARGIN'
      | 'MAIN_MINING'
      | 'C2C_MAIN'
      | 'C2C_UMFUTURE'
      | 'C2C_MINING'
      | 'C2C_MARGIN'
      | 'UMFUTURE_MAIN'
      | 'UMFUTURE_C2C'
      | 'UMFUTURE_MARGIN'
      | 'CMFUTURE_MAIN'
      | 'CMFUTURE_MARGIN'
      | 'MARGIN_MAIN'
      | 'MARGIN_UMFUTURE'
      | 'MARGIN_CMFUTURE'
      | 'MARGIN_MINING'
      | 'MARGIN_C2C'
      | 'MINING_MAIN'
      | 'MINING_UMFUTURE'
      | 'MINING_C2C'
      | 'MINING_MARGIN'
      | 'MAIN_PAY'
      | 'PAY_MAIN'
      | 'ISOLATEDMARGIN_MARGIN'
      | 'MARGIN_ISOLATEDMARGIN'
      | 'ISOLATEDMARGIN_ISOLATEDMARGIN';
    /** Signature */
    signature: string;
    /** Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
    stopPrice: number;
    /** For isolated margin or not, 'TRUE', 'FALSE', default 'FALSE' */
    isIsolatedMargin: 'TRUE' | 'FALSE';
    transFrom: 'SPOT' | 'ISOLATED_MARGIN';
    transTo: 'SPOT' | 'ISOLATED_MARGIN';
    /** Max 5 symbols can be sent; separated by ',' */
    symbols: string;
    arraySymbols: string;
    /** 0-deposit, 1-withdraw */
    transactionType: '0' | '1';
    beginTime: number;
    /** Default 1 */
    page: number;
    /** Default 100, max 500 */
    rows: number;
    /** Quote quantity */
    quoteOrderQty: number;
    /** Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
    icebergQty: number;
    /** "ALL", "SUBSCRIBABLE", "UNSUBSCRIBABLE"; Default: 'ALL' */
    flexibleProductStatus: 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';
    /** "ALL", "SUBSCRIBABLE", "UNSUBSCRIBABLE"; Default: 'ALL' */
    fixedAndActivityProductStatus: 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';
    /** "ALL", "TRUE"; Default: "ALL" */
    featured: 'ALL' | 'TRUE';
    flexibleProductId: string;
    fixedAndActivityProjectId: string;
    /** "FAST", "NORMAL" */
    flexibleProductType: 'FAST' | 'NORMAL';
    /** "ACTIVITY", "CUSTOMIZED_FIXED" */
    fixedAndActivityProductType: 'ACTIVITY' | 'CUSTOMIZED_FIXED';
    /** "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME */
    sortBy: 'START_TIME' | 'LOT_SIZ' | 'LOT_SIZE' | 'INTEREST_RATE' | 'DURATION';
    /** default "true" */
    isSortAsc: boolean;
    projectId: string;
    lot: string;
    /** "DAILY" for flexible, "ACTIVITY" for activity, "CUSTOMIZED_FIXED" for fixed */
    lendingType: 'DAILY' | 'ACTIVITY' | 'CUSTOMIZED_FIXED';
    optionalPositionId: string;
    positionId: string;
    /** "HOLDING", "REDEEMED" */
    positionStatus: 'HOLDING' | 'REDEEMED';
    /** Mining Account */
    userName: string;
    /** Algorithm(sha256) */
    algo: string;
    /** Page number, default is first page, start form 1 */
    pageIndex: string;
    /** sort sequence（default=0）0 positive sequence, 1 negative sequence */
    sort: number;
    /** Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time */
    sortColumn: number;
    /** miners status（default=0）0 all, 1 valid, 2 invalid, 3 failure */
    workerStatus: number;
    /** Search date, millisecond timestamp, while empty query all */
    startDate: string;
    /** Search date, millisecond timestamp, while empty query all */
    endDate: string;
    /** Number of pages, minimum 10, maximum 200 */
    pageSize: string;
    /** Mining ID */
    configId: string;
    /** Mining Account */
    toPoolUser: string;
    /** Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) */
    hashRate: string;
    /** Miner’s name */
    workerName: string;
    /** BTCDOWN, BTCUP */
    blvtTokenName: string;
    /** BTCDOWN, BTCUP */
    optionalBlvtTokenName: string;
    poolId: number;
    optionalPoolId: number;
    quoteAsset: string;
    baseAsset: string;
    quoteQty: number;
    /** Sub-account email */
    subAccountEmail: string;
    /** Sub-account email */
    optionalSubAccountEmail: string;
    /** Sub-account email */
    optionalSubAccountFromEmail: string;
    /** Sub-account email */
    optionalSubAccountToEmail: string;
    /** Sender email */
    subAccountFromEmail: string;
    /** Recipient email */
    subAccountToEmail: string;
    /** Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
    fromSymbol: string;
    /** Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
    toSymbol: string;
    /** Isolated symbol */
    isolatedSymbol: string;
    /** Default: false. Set to true for archived data from 6 months ago */
    archived: string;
    /** Default NO_SIDE_EFFECT */
    sideEffectType: 'NO_SIDE_EFFECT' | 'MARGIN_BUY' | 'AUTO_REPAY';
    /** A unique Id for the limit order */
    limitClientOrderId: string;
    limitIcebergQty: number;
    /** A unique Id for the stop loss/stop loss limit leg */
    stopClientOrderId: string;
    ocoStopPrice: number;
    /** If provided, stopLimitTimeInForce is required. */
    stopLimitPrice: number;
    stopIcebergQty: number;
    stopLimitTimeInForce: 'GTC' | 'FOK' | 'IOC';
  };
}

export interface operations {}

export interface external {}
